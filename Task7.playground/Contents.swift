import Cocoa
/* 1.рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ Enum-рЃў рЃАрЃљрЃ«рЃћрЃџрЃўрЃЌ WeekDay рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃЦрЃћрЃўрЃАрЃћрЃЉрЃўрЃЌ. рЃЊрЃљрЃгрЃћрЃарЃћрЃЌ рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃўрЃдрЃћрЃЉрЃА рЃљрЃЏ рЃћрЃюрЃљрЃЏрЃўрЃА рЃбрЃўрЃърЃА рЃЊрЃљ рЃЉрЃћрЃГрЃЊрЃљрЃЋрЃА рЃњрЃљрЃЊрЃљрЃгрЃЮрЃЊрЃћрЃЉрЃБрЃџрЃў рЃЊрЃдрЃћ рЃАрЃљрЃЏрЃБрЃерЃљрЃЮрЃљ рЃЌрЃБ рЃЊрЃљрЃАрЃЋрЃћрЃюрЃћрЃЉрЃўрЃА.*/
enum WeekDay {
    case monday, tuesday, wednesday, thursday, friday, saturday, sunday
    
    func workdayOrWeekend() {
        switch self {
        case .saturday, .sunday:
            print("\(self) = weekend")
        default:
            print("\(self) = workday")
        }
    }
}

/* 2.рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ Enum-рЃў рЃАрЃљрЃ«рЃћрЃџрЃљрЃЊ GialaSquad, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃљрЃдрЃгрЃћрЃарЃА рЃњрЃўрЃљ рЃАрЃБрЃарЃљрЃЏрЃћрЃџрЃљрЃерЃЋрЃўрЃџрЃўрЃА рЃцрЃљрЃюрЃЎрЃџрЃБрЃЉрЃўрЃА рЃгрЃћрЃЋрЃарЃћрЃЉрЃўрЃА рЃЊрЃЮрЃюрЃћрЃћрЃЉрЃА рЃЦрЃћрЃўрЃАрЃћрЃЉрЃўрЃЌ : РђюTsigroviMantoРђЮ, РђюMoshishvlebuliMkerdiРђЮ, РђюTuGapatioРђЮ. рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃцрЃарЃЮрЃцрЃћрЃарЃЌрЃў GialaSquad-рЃерЃў, рЃарЃЮрЃЏрЃћрЃџрЃАрЃљрЃф рЃћрЃЦрЃюрЃћрЃЉрЃљ рЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃљ рЃЌрЃБ рЃарЃљ рЃдрЃўрЃарЃА рЃЌрЃўрЃЌрЃЮрЃћрЃБрЃџрЃў рЃЊрЃЮрЃюрЃћ рЃЌрЃЋрЃћрЃерЃў (рЃЊрЃЮрЃюрЃћрЃћрЃЉрЃў рЃЊрЃљрЃџрЃљрЃњрЃћрЃЉрЃБрЃџрЃўрЃљ рЃФрЃЋрЃўрЃарЃўрЃЊрЃљрЃю рЃўрЃљрЃцрЃўрЃАрЃљрЃЎрЃћрЃю). рЃЊрЃљрЃБрЃЏрЃљрЃбрЃћрЃЌ рЃЏрЃћрЃЌрЃЮрЃЊрЃў рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЊрЃљрЃЉрЃћрЃГрЃЊрЃљрЃЋрЃА рЃЌрЃўрЃЌрЃЮрЃћрЃБрЃџрЃў рЃЊрЃЮрЃюрЃўрЃА рЃцрЃљрЃАрЃА.*/
enum GialoSquad {
    case TsigroviManto, MoshishvlebuliMkerdi, TuGapatio
    
    var price: Int {
        switch self {
        case .TsigroviManto:
            10_000
        case .MoshishvlebuliMkerdi:
            5_000
        case .TuGapatio:
            1_000
        }
    }
    func pricePrint() {
        switch self {
        case .TsigroviManto:
            print("TsigroviManto рЃЌрЃЋрЃћрЃерЃў \(price)$")
        case .MoshishvlebuliMkerdi:
            print("MoshishvlebuliMkerdi рЃЌрЃЋрЃћрЃерЃў \(price)$")
        case .TuGapatio:
            print("TuGapatio рЃЌрЃЋрЃћрЃерЃў \(price)$")
        }
    }
}

/* 3.рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ enum-рЃў Weather рЃерЃћрЃЏрЃЊрЃћрЃњрЃў рЃЦрЃћрЃўрЃАрЃћрЃЉрЃўрЃЌ, Sunny, Cloudy, Rainy рЃЊрЃљ Snowy. рЃљрЃЏ рЃЦрЃћрЃўрЃАрЃћрЃЉрЃА рЃБрЃюрЃЊрЃљ рЃ░рЃЦрЃЮрЃюрЃЊрЃћрЃА associated value Celsius-рЃўрЃА рЃАрЃљрЃ«рЃўрЃЌ. рЃЊрЃљрЃгрЃћрЃарЃћрЃЌ function рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЏрЃўрЃўрЃдрЃћрЃЉрЃА рЃљрЃЏ enum-рЃА, рЃЊрЃљ рЃЏрЃЮрЃњрЃЋрЃфрЃћрЃЏрЃА рЃарЃћрЃЎрЃЮрЃЏрЃћрЃюрЃЊрЃљрЃфрЃўрЃљрЃА рЃарЃљ рЃБрЃюрЃЊрЃљ рЃЕрЃљрЃЋрЃўрЃфрЃЋрЃљрЃЌ рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃљрЃЏрЃўрЃюрЃЊрЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ.*/
enum Weather {
    case sunny(celsius: Int)
    case cloudy(celsius: Int)
    case rainy(celsius: Int)
    case snowy(celsius: Int)
}

func whatToWear(weather: Weather) -> String {
    switch weather {
    case .sunny(let celsius) where celsius >= 25:
        "рЃЎрЃљрЃў \"рЃЏрЃљрЃўрЃЕрЃюрЃў\" рЃарЃљрЃЏрЃћ ­ЪћЦ"
    case .sunny:
        "рЃЕрЃљрЃўрЃфрЃЋрЃў рЃЌрЃ«рЃћрЃџрЃў рЃЏрЃљрЃўрЃАрЃБрЃарЃў Рўђ№ИЈ"
    case.cloudy(let celsius) where celsius >= 15:
        "рЃЪрЃљрЃЎрЃћрЃбрЃўрЃф рЃњрЃћрЃДрЃЮрЃцрЃљ РЏЁ№ИЈ"
    case .cloudy(celsius: let celsius):
        "рЃЦрЃБрЃарЃЌрЃБрЃЎрЃў рЃЊрЃљ рЃЦрЃЮрЃџрЃњрЃљрЃф рЃљрЃа рЃЊрЃљрЃњрЃљрЃЋрЃўрЃгрЃДрЃЊрЃћрЃА РўЂ№ИЈ"
    case .rainy(celsius: let celsius):
        "рЃАрЃљрЃгрЃЋрЃўрЃЏрЃљрЃарЃў рЃЊрЃљ рЃЦрЃЮрЃџрЃњрЃљ рЃљрЃа рЃЊрЃљрЃњрЃљрЃЋрЃўрЃгрЃДрЃЊрЃћрЃА! ­ЪїД№ИЈ "
    case .snowy(celsius: let celsius):
        "рЃ«рЃћрЃџрЃЌрЃљрЃЌрЃЏрЃљрЃюрЃћрЃЉрЃў рЃЊрЃљ рЃЦрЃБрЃЊрЃў рЃљрЃа рЃЊрЃљрЃњрЃљрЃЋрЃўрЃгрЃДрЃЊрЃћрЃА РЮё№ИЈ"
    }
}
print(whatToWear(weather: .sunny(celsius: 40)))

/* 4.рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ struct-рЃў Kanye, рЃцрЃарЃЮрЃцрЃћрЃарЃЌрЃћрЃЉрЃўрЃЌ: album, releaseYear. рЃљрЃЏрЃўрЃА рЃерЃћрЃЏрЃЊрЃћрЃњ рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ array-рЃў Kanye-рЃА рЃбрЃўрЃърЃўрЃА, рЃЕрЃљрЃљрЃЏрЃљрЃбрЃћрЃЌ рЃарЃљрЃЏрЃЮрЃЊрЃћрЃюрЃўрЃЏрЃћ Kanye-рЃА рЃЮрЃЉрЃўрЃћрЃЦрЃбрЃў, рЃЊрЃљ рЃерЃћрЃљрЃЋрЃАрЃћрЃЌ рЃЏрЃљрЃАрЃўрЃЋрЃў рЃЎрЃљрЃюрЃўрЃћрЃћрЃЉрЃўрЃЌ. рЃЊрЃљрЃгрЃћрЃарЃћрЃЌ рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЏрЃўрЃўрЃдрЃћрЃЉрЃА рЃљрЃЏ рЃЎрЃљрЃюрЃўрЃћрЃћрЃЉрЃўрЃА рЃЏрЃљрЃАрЃўрЃЋрЃА рЃЊрЃљ рЃгрЃћрЃџрЃА. рЃцрЃБрЃюрЃЦрЃфрЃўрЃљрЃЏ рЃБрЃюрЃЊрЃљ рЃЊрЃљрЃњрЃЋрЃўрЃЉрЃарЃБрЃюрЃЮрЃА рЃДрЃЋрЃћрЃџрЃљ рЃљрЃџрЃЉрЃЮрЃЏрЃў рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃњрЃљрЃЏрЃЮрЃерЃЋрЃћрЃЉрЃБрЃџрЃўрЃљ рЃњрЃљрЃЊрЃљрЃгрЃЮрЃЊрЃћрЃЉрЃБрЃџрЃў рЃгрЃџрЃўрЃА рЃерЃћрЃЏрЃЊрЃћрЃњ рЃЊрЃљ рЃЊрЃљрЃЉрЃћрЃГрЃЊрЃЮрЃА рЃўрЃАрЃўрЃюрЃў.*/
struct Kanye {
    let album: String
    let releaseYear: Int
}
var kanyeArray = [Kanye]()
kanyeArray = [
    Kanye.init(album: "Donda", releaseYear: 2021),
    Kanye.init(album: "JESUS IS KIN", releaseYear: 2019),
    Kanye.init(album: "Ye", releaseYear: 2018),
    Kanye.init(album: "The Life of Pablo", releaseYear: 2016),
    Kanye.init(album: "Yeezus", releaseYear: 2013),
    Kanye.init(album: "Vultures 1", releaseYear: 2024)
]

func albumsAfterYear(year: Int) {
    for album in kanyeArray {
        if album.releaseYear > year {
            print(album.album, album.releaseYear)
        }
    }
}
albumsAfterYear(year: 2018)

/* 5. рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ String-рЃўрЃА рЃбрЃўрЃърЃўрЃА lazy property wrapper рЃАрЃљрЃ«рЃћрЃџрЃљрЃЊ, cachedData. рЃўрЃюрЃўрЃфрЃўрЃљрЃџрЃўрЃќрЃћрЃЉрЃљ рЃњрЃљрЃБрЃЎрЃћрЃЌрЃћрЃЌ рЃЦрЃџрЃЮрЃЪрЃћрЃарЃўрЃЌ рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃА рЃАрЃбрЃарЃўрЃюрЃњрЃА рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЉрЃўрЃЌ Рђюlazy рЃўрЃюрЃўрЃфрЃўрЃљрЃџрЃўрЃќрЃћрЃЉрЃБрЃџрЃўрЃљРђЮ. рЃЏрЃўрЃгрЃЋрЃЊрЃўрЃЌ рЃљрЃЏ рЃцрЃарЃЮрЃцрЃћрЃарЃЌрЃўрЃА рЃЊрЃљ рЃЊрЃљрЃЉрЃћрЃГрЃЊрЃћрЃЌ рЃЏрЃўрЃАрЃў рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЉрЃљ */
@propertyWrapper
struct cachedDate {
    lazy var value: String = self.initializer()
    let initializer: () -> String
    init(wrappedValue initializer: @escaping @autoclosure () -> String) {
        self.initializer = initializer
    }
    var wrappedValue: String {
        mutating get {
            value
        }
    }
}
struct newStruct {
    @cachedDate var cachedData = "lazy рЃўрЃюрЃўрЃфрЃўрЃљрЃџрЃўрЃќрЃћрЃЉрЃБрЃџрЃўрЃљ"
}
var dataStatus = newStruct()
print(dataStatus.cachedData)

/* optional
 рЃЉрЃљрЃарЃЉрЃљрЃарЃћрЃЏ рЃњрЃљрЃЊрЃљрЃгрЃДрЃЋрЃўрЃбрЃљ рЃърЃарЃЮрЃњрЃарЃљрЃЏрЃўрЃарЃћрЃЉрЃљрЃАрЃЌрЃљрЃю рЃћрЃарЃЌрЃљрЃЊ рЃЊрЃљрЃЏрЃљрЃбрЃћрЃЉрЃўрЃЌрЃў рЃАрЃљрЃЏрЃАрЃљрЃ«рЃБрЃарЃў рЃЊрЃљрЃћрЃгрЃДрЃЮ рЃЊрЃљ рЃбрЃљрЃарЃЮрЃА рЃАрЃљрЃЏрЃЎрЃўрЃЌрЃ«рЃљрЃЮ рЃ»рЃўрЃ«рЃБрЃарЃў рЃњрЃљрЃ«рЃАрЃюрЃљ. рЃЏрЃўрЃАрЃў рЃАрЃљрЃ«рЃћрЃџрЃў рЃБрЃфрЃћрЃЉ рЃњрЃљрЃЋрЃљрЃарЃЊрЃљ рЃЊрЃљ рЃЦрЃљрЃарЃЌрЃЋрЃћрЃџрЃў рЃЋрЃљрЃарЃАрЃЎрЃЋрЃџрЃљрЃЋрЃћрЃЉрЃўрЃА рЃДрЃБрЃарЃљрЃЏрЃЊрЃћрЃф рЃЏрЃўрЃЋрЃўрЃЊрЃљ. рЃћрЃарЃЌ рЃЊрЃдрЃћрЃА рЃЏрЃљрЃА рЃ»рЃўрЃ«рЃБрЃарЃерЃў рЃФрЃљрЃџрЃўрЃљрЃю рЃюрЃљрЃфрЃюрЃЮрЃЉрЃў рЃАрЃљрЃ«рЃћрЃћрЃЉрЃў рЃњрЃљрЃЏрЃЮрЃћрЃфрЃ«рЃљрЃЊрЃљ, рЃЉрЃћрЃЊрЃўрЃюрЃљ рЃЊрЃљ рЃерЃљрЃЋрЃў рЃърЃарЃўрЃюрЃфрЃў. рЃърЃарЃЮрЃцрЃћрЃАрЃўрЃЮрЃюрЃљрЃџрЃЏрЃљ рЃюрЃљрЃЌрЃћрЃџрЃЏрЃ«рЃўрЃџрЃЋрЃћрЃџрЃЏрЃљ рЃњрЃљрЃерЃљрЃџрЃљ рЃЎрЃљрЃарЃбрЃў рЃЊрЃљ рЃЊрЃљрЃўрЃгрЃДрЃЮ рЃЏрЃљрЃЌ рЃЏрЃЮрЃЏрЃљрЃЋрЃљрЃџрЃерЃў рЃ«рЃћрЃџрЃћрЃЉрЃўрЃА рЃцрЃљрЃЌрЃБрЃарЃў. рЃЉрЃљрЃарЃЉрЃљрЃарЃћрЃА рЃбрЃљрЃарЃЮрЃА рЃЊрЃљрЃАрЃбрЃљ рЃАрЃљрЃЎрЃЏрЃљрЃЮрЃЊ рЃБрЃюрЃўрЃЎрЃљрЃџрЃБрЃарЃўрЃљ, рЃўрЃА рЃЏрЃ«рЃЮрЃџрЃЮрЃЊ 12 рЃЎрЃљрЃарЃбрЃА рЃерЃћрЃўрЃфрЃљрЃЋрЃА - Star, Empress, Tower, Hanged Man, Chariot, Moon, Hierophant, Devil, Lovers, Wheel of Fortune, Fool, Magician рЃЊрЃљ рЃЏрЃљрЃЌ рЃљрЃдрЃгрЃћрЃарЃћрЃЉрЃА -
 рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ Enum рЃАрЃљрЃ«рЃћрЃџрЃљрЃЊ TarotCard рЃЊрЃљ рЃњрЃљрЃюрЃАрЃљрЃќрЃдрЃЋрЃарЃћрЃЌ рЃЏрЃљрЃАрЃерЃў 12 рЃЎрЃљрЃарЃбрЃўрЃА рЃЦрЃћрЃўрЃАрЃў.
 
 рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃАрЃбрЃљрЃбрЃўрЃЎрЃБрЃарЃў рЃЏрЃћрЃЌрЃЮрЃЊрЃў TarotCard-рЃерЃў рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЊрЃљрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃА рЃЎрЃљрЃарЃбрЃА рЃерЃћрЃарЃЕрЃћрЃЋрЃўрЃЌрЃљрЃЊ
 
 рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃЏрЃћрЃЌрЃЮрЃЊрЃў TarotCard-рЃерЃў рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЊрЃљрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃА рЃЎрЃљрЃарЃбрЃўрЃА рЃљрЃдрЃгрЃћрЃарЃљрЃА string-рЃўрЃА рЃАрЃљрЃ«рЃўрЃЌ
 
 рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃАрЃбрЃарЃБрЃЦрЃбрЃБрЃарЃљ рЃАрЃљрЃ«рЃћрЃџрЃљрЃЊ TarotReading. рЃњрЃљрЃБрЃгрЃћрЃарЃћрЃЌ рЃцрЃарЃЮрЃцрЃћрЃарЃЌрЃўрЃћрЃЉрЃў рЃгрЃљрЃарЃАрЃБрЃџрЃў, рЃљрЃгрЃЏрЃДрЃЮ рЃЊрЃљ рЃЏрЃЮрЃЏрЃљрЃЋрЃљрЃџрЃў. рЃњрЃљрЃБрЃЎрЃћрЃЌрЃћрЃЌ рЃўрЃюрЃўрЃфрЃўрЃљрЃџрЃўрЃќрЃљрЃфрЃўрЃљ рЃљрЃЏ рЃцрЃарЃЮрЃърЃћрЃарЃЌрЃўрЃћрЃЉрЃА рЃарЃљрЃЌрЃљ рЃЏрЃљрЃЌ рЃЏрЃўрЃўрЃдрЃЮрЃю рЃерЃћрЃарЃЕрЃћрЃЋрЃўрЃЌрЃў рЃбрЃљрЃарЃЮрЃА рЃЎрЃљрЃарЃбрЃўрЃА рЃљрЃдрЃгрЃћрЃарЃўрЃА рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЉрЃљ.
 
 рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃЏрЃћрЃЌрЃЮрЃЊрЃў TarotReading-рЃерЃў, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЊрЃљрЃЉрЃћрЃГрЃЊрЃљрЃЋрЃА рЃљрЃЏ рЃАрЃљрЃЏ рЃљрЃарЃЕрЃћрЃБрЃџ рЃбрЃљрЃарЃЮрЃА рЃЎрЃљрЃарЃбрЃА.
 */
enum TarotCard {
    case star
    case empress
    case tower
    case hangedMan
    case chariot
    case moon
    case hierophant
    case devil
    case lovers
    case wheelOfFortune
    case fool
    case magician
    
    static func randomCard() -> TarotCard {
        let allCards: [TarotCard] = [.wheelOfFortune, .chariot, .devil, .empress, .fool, .hangedMan, .hierophant, .lovers, .magician, .moon, .star, .tower]
        let index = Int.random(in: 0...11)
        return allCards[index]
    }
    
    func meaning() -> String {
        switch self {
        case .star:
            " star: рЃгрЃљрЃарЃЏрЃЮрЃљрЃЊрЃњрЃћрЃюрЃА рЃўрЃЏрЃћрЃЊрЃА, рЃерЃЌрЃљрЃњрЃЮрЃюрЃћрЃЉрЃљрЃА рЃЊрЃљ рЃАрЃБрЃџрЃўрЃћрЃа рЃ«рЃћрЃџрЃЏрЃФрЃдрЃЋрЃљрЃюрЃћрЃџрЃЮрЃЉрЃљрЃА. рЃћрЃА рЃюрЃўрЃерЃюрЃљрЃЋрЃА рЃњрЃљрЃюрЃљрЃ«рЃџрЃћрЃЉрЃљрЃА, рЃЮрЃърЃбрЃўрЃЏрЃўрЃќрЃЏрЃА рЃЊрЃљ рЃЏрЃЮрЃЏрЃљрЃЋрЃџрЃўрЃА рЃарЃгрЃЏрЃћрЃюрЃљрЃА."
        case .empress:
            "empress: рЃњрЃљрЃюрЃљрЃАрЃљрЃ«рЃўрЃћрЃарЃћрЃЉрЃА рЃљрЃдрЃќрЃарЃЊрЃљрЃА, рЃАрЃўрЃБрЃ«рЃЋрЃћрЃА рЃЊрЃљ рЃЊрЃћрЃЊрЃЮрЃЉрЃарЃўрЃЋ рЃўрЃюрЃАрЃбрЃўрЃюрЃЦрЃбрЃћрЃЉрЃА. рЃўрЃА рЃгрЃљрЃарЃЏрЃЮрЃљрЃЊрЃњрЃћрЃюрЃА рЃюрЃљрЃДрЃЮрЃцрЃўрЃћрЃарЃћрЃЉрЃљрЃА, рЃЎрЃарЃћрЃљрЃбрЃўрЃБрЃџрЃЮрЃЉрЃљрЃА рЃЊрЃљ рЃ░рЃљрЃарЃЏрЃЮрЃюрЃўрЃљрЃА рЃБрЃарЃЌрЃўрЃћрЃарЃЌрЃЮрЃЉрЃћрЃЉрЃерЃў."
        case .tower:
            "tower: рЃюрЃўрЃерЃюрЃљрЃЋрЃА рЃБрЃћрЃфрЃљрЃа рЃфрЃЋрЃџрЃўрЃџрЃћрЃЉрЃљрЃА, рЃЦрЃљрЃЮрЃАрЃА рЃЊрЃљ рЃњрЃљрЃюрЃљрЃЊрЃњрЃБрЃарЃћрЃЉрЃљрЃА. рЃўрЃА рЃгрЃљрЃарЃЏрЃЮрЃљрЃЊрЃњрЃћрЃюрЃА рЃљрЃ»рЃљрЃюрЃДрЃћрЃЉрЃљрЃА, рЃњрЃљрЃЏрЃЮрЃфрЃ«рЃљрЃЊрЃћрЃЉрЃљрЃА рЃЊрЃљ рЃФрЃЋрЃћрЃџрЃў рЃАрЃбрЃарЃБрЃЦрЃбрЃБрЃарЃћрЃЉрЃўрЃА рЃюрЃњрЃарЃћрЃЋрЃљрЃА рЃљрЃ«рЃљрЃџрЃў рЃгрЃљрЃЏрЃЮрЃгрЃДрЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА."
        case .hangedMan:
            "hangedMan: рЃгрЃљрЃарЃЏрЃЮрЃљрЃЊрЃњрЃћрЃюрЃА рЃЏрЃАрЃ«рЃЋрЃћрЃарЃърЃџрЃА, рЃЊрЃљрЃюрЃћрЃЉрЃћрЃЉрЃљрЃА рЃЊрЃљ рЃњрЃљрЃерЃЋрЃћрЃЉрЃљрЃА. рЃћрЃА рЃюрЃўрЃерЃюрЃљрЃЋрЃА рЃерЃћрЃЕрЃћрЃарЃћрЃЉрЃўрЃА, рЃљрЃ«рЃљрЃџрЃў рЃърЃћрЃарЃАрЃърЃћрЃЦрЃбрЃўрЃЋрЃћрЃЉрЃўрЃА рЃЏрЃЮрЃърЃЮрЃЋрЃћрЃЉрЃўрЃАрЃљ рЃЊрЃљ рЃЌрЃЋрЃўрЃЌрЃарЃћрЃцрЃџрЃћрЃЦрЃАрЃўрЃўрЃА рЃърЃћрЃарЃўрЃЮрЃЊрЃА."
        case .chariot:
            "chariot:рЃњрЃљрЃюрЃљрЃАрЃљрЃ«рЃўрЃћрЃарЃћрЃЉрЃА рЃюрЃћрЃЉрЃўрЃАрЃДрЃЮрЃцрЃљрЃА, рЃЏрЃЮрЃюрЃЊрЃЮрЃЏрЃћрЃЉрЃљрЃА рЃЊрЃљ рЃњрЃљрЃЏрЃљрЃарЃ»рЃЋрЃћрЃЉрЃљрЃА. рЃўрЃА рЃгрЃљрЃарЃЏрЃЮрЃљрЃЊрЃњрЃћрЃюрЃА рЃАрЃљрЃЎрЃБрЃЌрЃљрЃа рЃфрЃ«рЃЮрЃЋрЃарЃћрЃЉрЃљрЃќрЃћ рЃЎрЃЮрЃюрЃбрЃарЃЮрЃџрЃўрЃА рЃљрЃдрЃћрЃЉрЃљрЃА, рЃЏрЃўрЃќрЃюрЃћрЃЉрЃўрЃА рЃЏрЃўрЃдрЃгрЃћрЃЋрЃљрЃА рЃЊрЃљ рЃЊрЃљрЃЉрЃарЃЎрЃЮрЃџрЃћрЃЉрЃћрЃЉрЃўрЃА рЃњрЃљрЃЊрЃљрЃџрЃљрЃ«рЃЋрЃљрЃА рЃцрЃЮрЃЎрЃБрЃАрЃўрЃарЃћрЃЉрЃўрЃАрЃљ рЃЊрЃљ рЃАрЃгрЃарЃљрЃцрЃЋрЃўрЃА рЃњрЃќрЃўрЃЌ."
        case .moon:
            "moon: рЃљрЃдрЃюрЃўрЃерЃюрЃљрЃЋрЃА рЃўрЃюрЃбрЃБрЃўрЃфрЃўрЃљрЃА, рЃўрЃџрЃБрЃќрЃўрЃљрЃА рЃЊрЃљ рЃЦрЃЋрЃћрЃфрЃюрЃЮрЃЉрЃўрЃћрЃа рЃљрЃќрЃарЃћрЃЉрЃА. рЃўрЃА рЃгрЃљрЃарЃЏрЃЮрЃљрЃЊрЃњрЃћрЃюрЃА рЃњрЃљрЃБрЃарЃЎрЃЋрЃћрЃЋрЃџрЃЮрЃЉрЃљрЃА, рЃЊрЃљрЃЉрЃюрЃћрЃБрЃџрЃЮрЃЉрЃљрЃА рЃЊрЃљ рЃљрЃБрЃфрЃўрЃџрЃћрЃЉрЃџрЃЮрЃЉрЃљрЃА, рЃћрЃюрЃЊрЃЮрЃЌ рЃАрЃљрЃЎрЃБрЃЌрЃљрЃа рЃўрЃюрЃАрЃбрЃўрЃюрЃЦрЃбрЃћрЃЉрЃА рЃБрЃфрЃюрЃЮрЃЉрЃўрЃАрЃЎрЃћрЃю рЃюрЃљрЃЋрЃўрЃњрЃљрЃфрЃўрЃўрЃА рЃЊрЃарЃЮрЃА."
        case .hierophant:
            "hierophant:рЃгрЃљрЃарЃЏрЃЮрЃљрЃЊрЃњрЃћрЃюрЃА рЃбрЃарЃљрЃЊрЃўрЃфрЃўрЃљрЃА, рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃЮрЃЉрЃљрЃА рЃЊрЃљ рЃАрЃБрЃџрЃўрЃћрЃа рЃ«рЃћрЃџрЃЏрЃФрЃдрЃЋрЃљрЃюрЃћрЃџрЃЮрЃЉрЃљрЃА. рЃћрЃА рЃюрЃўрЃерЃюрЃљрЃЋрЃА рЃАрЃўрЃЉрЃарЃФрЃюрЃўрЃА рЃФрЃўрЃћрЃЉрЃљрЃА рЃЊрЃљрЃЏрЃЎрЃЋрЃўрЃЊрЃарЃћрЃЉрЃБрЃџрЃў рЃарЃгрЃЏрЃћрЃюрЃћрЃЉрЃўрЃАрЃњрЃљрЃю, рЃўрЃюрЃАрЃбрЃўрЃбрЃБрЃбрЃћрЃЉрЃўрЃАрЃљ рЃЊрЃљ рЃЏрЃћрЃюрЃбрЃЮрЃарЃћрЃЉрЃўрЃАрЃњрЃљрЃю."
        case .devil:
            "devil: рЃњрЃљрЃюрЃљрЃАрЃљрЃ«рЃўрЃћрЃарЃћрЃЉрЃА рЃфрЃЊрЃБрЃюрЃћрЃЉрЃљрЃА, рЃЏрЃЮрЃюрЃЮрЃЉрЃљрЃАрЃљ рЃЊрЃљ рЃЏрЃљрЃбрЃћрЃарЃўрЃљрЃџрЃўрЃќрЃЏрЃА. рЃўрЃА рЃгрЃљрЃарЃЏрЃЮрЃљрЃЊрЃњрЃћрЃюрЃА рЃљрЃЊрЃљрЃЏрЃўрЃљрЃюрЃўрЃА рЃЉрЃБрЃюрЃћрЃЉрЃўрЃА рЃЉрЃюрЃћрЃџ рЃљрЃАрЃърЃћрЃЦрЃбрЃћрЃЉрЃА, рЃЊрЃљрЃЏрЃЮрЃЎрЃўрЃЊрЃћрЃЉрЃБрЃџрЃћрЃЉрЃљрЃА рЃЊрЃљ рЃерЃћрЃЏрЃќрЃдрЃБрЃЊрЃЋрЃћрЃџрЃў рЃарЃгрЃЏрЃћрЃюрЃћрЃЉрЃўрЃАрЃљ рЃЊрЃљ рЃЕрЃЋрЃћрЃЋрЃћрЃЉрЃўрЃАрЃњрЃљрЃю рЃЌрЃљрЃЋрЃўрЃА рЃЊрЃљрЃдрЃгрЃћрЃЋрЃўрЃА рЃљрЃБрЃфрЃўрЃџрЃћрЃЉрЃџрЃЮрЃЉрЃљрЃА"
        case .lovers:
            " lovers: рЃљрЃдрЃюрЃўрЃерЃюрЃљрЃЋрЃА рЃърЃљрЃарЃбрЃюрЃўрЃЮрЃарЃЮрЃЉрЃљрЃА, рЃљрЃарЃЕрЃћрЃЋрЃљрЃюрЃА рЃЊрЃљ рЃ░рЃљрЃарЃЏрЃЮрЃюрЃўрЃљрЃА. рЃўрЃА рЃгрЃљрЃарЃЏрЃЮрЃљрЃЊрЃњрЃћрЃюрЃА рЃАрЃўрЃДрЃЋрЃљрЃарЃБрЃџрЃА, рЃЏрЃўрЃќрЃўрЃЊрЃБрЃџрЃЮрЃЉрЃљрЃА рЃЊрЃљ рЃњрЃљрЃЊрЃљрЃгрЃДрЃЋрЃћрЃбрЃўрЃџрЃћрЃЉрЃўрЃА рЃЏрЃўрЃдрЃћрЃЉрЃўрЃА рЃљрЃБрЃфрЃўрЃџрЃћрЃЉрЃџрЃЮрЃЉрЃљрЃА рЃдрЃўрЃарЃћрЃЉрЃБрЃџрЃћрЃЉрЃћрЃЉрЃќрЃћ рЃЊрЃљ рЃАрЃ«рЃЋрЃћрЃЉрЃЌрЃљрЃю рЃЎрЃљрЃЋрЃерЃўрЃарЃћрЃЉрЃќрЃћ рЃЊрЃљрЃДрЃарЃЊрЃюрЃЮрЃЉрЃўрЃЌ."
        case .wheelOfFortune:
            "wheelOfFortun: рЃгрЃљрЃарЃЏрЃЮрЃљрЃЊрЃњрЃћрЃюрЃА рЃЉрЃћрЃЊрЃА, рЃфрЃўрЃЎрЃџрЃћрЃЉрЃА рЃЊрЃљ рЃЏрЃЮрЃБрЃџрЃЮрЃЊрЃюрЃћрЃџ рЃфрЃЋрЃџрЃўрЃџрЃћрЃЉрЃћрЃЉрЃА. рЃћрЃА рЃюрЃўрЃерЃюрЃљрЃЋрЃА рЃўрЃдрЃЉрЃљрЃџрЃА, рЃерЃћрЃАрЃљрЃФрЃџрЃћрЃЉрЃџрЃЮрЃЉрЃћрЃЉрЃА рЃЊрЃљ рЃфрЃ«рЃЮрЃЋрЃарЃћрЃЉрЃўрЃАрЃћрЃБрЃџрЃў рЃЏрЃЮрЃњрЃќрЃљрЃБрЃарЃЮрЃЉрЃўрЃА рЃљрЃдрЃЏрЃљрЃЋрЃџрЃЮрЃЉрЃљрЃАрЃљ рЃЊрЃљ рЃЋрЃљрЃарЃЊрЃюрЃљрЃА, рЃњрЃЋрЃљрЃ«рЃАрЃћрЃюрЃћрЃЉрЃА, рЃарЃЮрЃЏ рЃфрЃЋрЃџрЃўрЃџрЃћрЃЉрЃљ рЃњрЃљрЃарЃЊрЃљрЃБрЃЋрЃљрЃџрЃўрЃљ."
        case .fool:
            "fool: рЃњрЃљрЃюрЃљрЃАрЃљрЃ«рЃўрЃћрЃарЃћрЃЉрЃА рЃБрЃЊрЃљрЃюрЃљрЃерЃљрЃБрЃџрЃЮрЃЉрЃљрЃА, рЃАрЃърЃЮрЃюрЃбрЃљрЃюрЃБрЃарЃЮрЃЉрЃљрЃА рЃЊрЃљ рЃљрЃ«рЃљрЃџ рЃгрЃљрЃЏрЃЮрЃгрЃДрЃћрЃЉрЃћрЃЉрЃА. рЃћрЃА рЃгрЃљрЃарЃЏрЃЮрЃљрЃЊрЃњрЃћрЃюрЃА рЃарЃгрЃЏрЃћрЃюрЃўрЃА рЃюрЃљрЃ«рЃбрЃЮрЃЏрЃА, рЃЌрЃљрЃЋрЃњрЃљрЃЊрЃљрЃАрЃљрЃЋрЃџрЃћрЃЉрЃўрЃА рЃЏрЃўрЃдрЃћрЃЉрЃљрЃА рЃЊрЃљ рЃАрЃљрЃЏрЃДрЃљрЃарЃЮрЃА рЃ«рЃћрЃџрЃЏрЃФрЃдрЃЋрЃљрЃюрЃћрЃџрЃЮрЃЉрЃўрЃАрЃљрЃЊрЃЏрЃў рЃюрЃЊрЃЮрЃЉрЃљрЃА."
        case .magician:
            "magician: рЃљрЃдрЃюрЃўрЃерЃюрЃљрЃЋрЃА рЃњрЃљрЃЏрЃЮрЃЋрЃџрЃўрЃюрЃћрЃЉрЃљрЃА, рЃФрЃљрЃџрЃљрЃА рЃЊрЃљ рЃърЃЮрЃбрЃћрЃюрЃфрЃўрЃљрЃџрЃА. рЃўрЃА рЃгрЃљрЃарЃЏрЃЮрЃљрЃЊрЃњрЃћрЃюрЃА рЃЎрЃарЃћрЃљрЃбрЃўрЃБрЃџрЃЮрЃЉрЃљрЃА, рЃБрЃюрЃљрЃарЃА рЃЊрЃљ рЃБрЃюрЃљрЃарЃА, рЃўрЃЊрЃћрЃћрЃЉрЃў рЃарЃћрЃљрЃџрЃЮрЃЉрЃљрЃЊ рЃњрЃљрЃарЃЊрЃљрЃЦрЃЏрЃюрЃљрЃА рЃЮрЃарЃўрЃћрЃюрЃбрЃўрЃарЃћрЃЉрЃБрЃџрЃў рЃњрЃљрЃюрЃќрЃарЃљрЃ«рЃЋрЃўрЃАрЃљ рЃЊрЃљ рЃЏрЃЮрЃЦрЃЏрЃћрЃЊрЃћрЃЉрЃўрЃА рЃњрЃќрЃўрЃЌ."
        }
    }
}
struct TarotReading {
    let past: String
    var present: String
    var future: String
    
    init() {
        past = TarotCard.randomCard().meaning()
        present = TarotCard.randomCard().meaning()
        future = TarotCard.randomCard().meaning()
    }
    func printChoosenCard() {
        print("past: \(past)")
        print("Present: \(present)")
        print("future: \(future)")
    }
}
let bedinasReading = TarotReading()
bedinasReading.printChoosenCard()
